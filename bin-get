#!/usr/bin/env bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/" && pwd)"
cd "$DIR" || exit 1

set -e
shopt -s nocasematch


options=$(getopt -a -o "hfvy" --longoptions "help,force,yes,verify:,name:,verbose" -- "$@")
eval set -- "$options"

apt_quiet="-qq"
auto_yes=false
verbose=false
force=false

function usage() {
	echo "Usage: $0  [OPTIONS] install <user/repo> <version>"
	echo "  -h, --help              Show this help message and exit"
	echo "  -v, --verbose           Verbose output"
	echo "  -y, --yes               Automatically answer yes to all questions"
	echo "  -f, --force             Force install"
	echo "  --verify                Verify hash of binary"
	echo "  --name                  Name of binary"
#	echo "  --                      Stop processing arguments"
}

while true; do
	case "$1" in
	-h | --help)
		usage
		exit 0
		;;
	-v | --verbose)
		# set -x
		apt_quiet=""
		verbose=true
		;;
    -y | --yes)
		auto_yes=true
		;;
	-f | --force)
		force=true
		;;
	--verify)
		shift
		verify_hash="$1"
		;;
	--name)
		shift
		bin_name="$1"
		;;
	--)
		shift
		break

		;;
	esac
	shift
done


if [[ "$1" = '' ]]; then
    echo "Please provide the method as the first argument" >&2
    exit 2
fi
method="$1"

if [[ "$2" = '' ]]; then
    echo "Please provide the package name as the second argument" >&2
    exit 3
fi
package_name="$2"

if [[ "$bin_name" == "" ]]; then
	bin_name="$(echo "$package_name" | cut -d/ -f2)"
fi

if [[ "$force" = false ]]; then
	if command -v "$bin_name" &>/dev/null; then
		echo "Package $package_name ($bin_name) already installed!" >&2
		exit 4
	fi
fi

version=latest
api_url=https://api.github.com/repos/$package_name/releases/$version
if [[ "$3" != '' ]]; then
    version="$3"
    api_url=https://api.github.com/repos/$package_name/releases/tags/$3
fi


github_curl_auth=
if [[ "$GITHUB_TOKEN" != '' ]] && [[ "$GITHUB_USER" != '' ]]; then
	github_curl_auth="-u $GITHUB_USER:$GITHUB_TOKEN"

	if [[ "$verbose" = true ]]; then
		echo "Using $GITHUB_USER for authentication"
	fi
fi

function fancy_message() {
    if [ -z "${1}" ] || [ -z "${2}" ]; then
      return
    fi

    local RED="\e[31m"
    local GREEN="\e[32m"
    local YELLOW="\e[33m"
    local MAGENTA="\e[35m"
    local RESET="\e[0m"
    local MESSAGE_TYPE=""
    local MESSAGE=""
    MESSAGE_TYPE="${1}"
    MESSAGE="${2}"

    case ${MESSAGE_TYPE} in
      info) echo -e "  [${GREEN}+${RESET}] ${MESSAGE}";;
      progress) echo -en "  [${GREEN}+${RESET}] ${MESSAGE}";;
      recommend) echo -e "  [${MAGENTA}!${RESET}] ${MESSAGE}";;
      warn) echo -e "  [${YELLOW}*${RESET}] WARNING! ${MESSAGE}";;
      error) echo -e "  [${RED}!${RESET}] ERROR! ${MESSAGE}";;
      fatal) echo -e "  [${RED}!${RESET}] ERROR! ${MESSAGE}"
             exit 1;;
      *) echo -e "  [?] UNKNOWN: ${MESSAGE}";;
    esac
}


function match_asset_name_to_current_platform() {
	local name="$1"
	local platform="$(uname --machine)"
	case ${platform} in
		aarch64|armv7l|x86_64) export HOST_ARCH="$(dpkg --print-architecture)";;
		*) fancy_message fatal "${platform} is not supported. Quitting.";;
	esac
	local kernel_name="$(uname --kernel-name)"

	if [[ "$verbose" = true ]]; then
		echo "Checking for matches '$name'"
	fi

	if [[ $name =~ .*$platform.* ]] || [[ $name =~ .*$HOST_ARCH.* ]]; then
		if [[ "$verbose" = true ]]; then
			echo "platform $platform/$HOST_ARCH found in $name"
		fi
	else
		return 1
	fi

	if [[ $name =~ .*$kernel_name.* ]]; then
		if [[ "$verbose" = true ]]; then
			echo "Kernel name found $kernel_name in $name"
		fi
	else
		return 1
	fi

	if [[ $name =~ .*tar\.gz$ ]] || [[ $name =~ .*tgz$ ]]; then
		if [[ "$verbose" = true ]]; then
			echo "Found an tar gz archive $name"
		fi
		return 2
	fi

	if [[ $name =~ .*\.asc$ ]]; then
		return 1
	fi


	# return 0 for found and binary
	# return 1 for no match
	# return 2 for tar gz

	return 0
}


function download_asset() {
	local download_url="$1"
	local asset_name="$2"

	local temp_dir="$(mktemp -d)"
	cd "$temp_dir"

	if [[ "$verbose" = true ]]; then
		echo "Download '$download_url' to '$temp_dir/$asset_name'"
	fi
	if [[ "$download_url" =~ .*github.com.* ]]; then
		curl -SsL $github_curl_auth "$download_url" -o "$temp_dir/$asset_name"
	else
		curl -SsL "$download_url" -o "$temp_dir/$asset_name"
	fi


	if [[ $download_url =~ .*tar\.gz$ ]] || [[ $download_url =~ .*tgz$ ]]; then
		if [[ "$verbose" = true ]]; then
			echo "Tar gz file found, extracting!"
		fi
		mv "$temp_dir/$asset_name" "$temp_dir/$asset_name.tgz"

		files="$(tar -tf "$temp_dir/$asset_name.tgz")"
		file_to_extract=
		for file in $files; do
			if [[ "$file" =~ .*$asset_name$ ]]; then
				file_to_extract="$file"
				break;
			fi
		done

		tar xzvf "$temp_dir/$asset_name.tgz" "$file_to_extract"
		if ! cmp --silent "$temp_dir/$file_to_extract" "$temp_dir/$asset_name"; then
			mv "$temp_dir/$file_to_extract" "$temp_dir/$asset_name"
		fi
	fi

	if [[ ! -f "$temp_dir/$asset_name" ]]; then
		echo "$temp_dir/$asset_name is not a file!"
		exit 5
	fi

	chmod +x "$temp_dir/$asset_name"


	if [[ "$auto_yes" != true ]]; then
		while true; do
			read -p "Are you sure you want to install $bin_name ($asset_name) version $version? " yn
			case $yn in
				[Yy]* ) break;;
				[Nn]* ) exit;;
				* ) echo "Please answer yes or no.";;
			esac
		done
	fi

	echo "Installing $bin_name ($asset_name) version $version"
	sudo install "$temp_dir/$asset_name" "/usr/bin/$bin_name"
	rm -rf "$temp_dir"
}

if [[ "$verbose" = true ]]; then
	echo "Calling api '$api_url'"
fi

result="$(curl -SsL $github_curl_auth "$api_url")"

if [[ "$result" =~ AuthenticationFailed ]]; then
	echo "Authentication to Github failed, possibly rate limit exceeded" >&2
	exit 5
fi

if [[ "$result" =~ 'API rate limit exceeded' ]]; then
	echo "API rate limit exceeded" >&2
	exit 5
fi

assets="$(echo "$result" | jq -r -c '.assets |  .[]')"

IFS=$'\n'
for asset in $assets; do
	asset_name="$(echo "$asset" | jq -r -c '.name')"

	set +e
	match_asset_name_to_current_platform "$asset_name";
	match_result=$?
	set -e
	if [[ $match_result != 1 ]]; then
		download_url="$(echo "$asset" | jq -r -c .browser_download_url)"

		download_asset "$download_url" "$bin_name"
		exit 0
	fi
done


# we haven'f found anything, maybe parse the release notes to see what we got
body="$(echo "$result" | jq -r -c .body)"
links="$(echo "$body" | grep -Eo 'http[^)]+')"

if [[ "$links" != '' ]]; then
	for link in $links; do
		set +e
		match_asset_name_to_current_platform "$link" "$bin_name"
		match_result=$?
		set -e
		if [[ $match_result != 1 ]]; then
			download_asset "$link" "$bin_name"
			break
		fi
	done
fi